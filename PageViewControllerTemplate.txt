import Foundation
import UIKit

class ${name}PageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {

    private var pageViewControllers: [${name}SinglePageViewController]!
    private var currentIndex = 0

    init() {
        super.init(transitionStyle: .Scroll, navigationOrientation: .Horizontal, options: nil)
    }

    override func loadView() {
        super.loadView()
        setupViewController()
    }

    private func setupViewController() {
        self.view.backgroundColor = UIColor.whiteColor()
        self.delegate = self
        self.dataSource = self
        setupPageControl()
        setupPageViewController()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func setupPageViewController() {
        self.pageViewControllers = [${name}SinglePageViewController]()
        // fill pageViewControllers with your ViewControllers
        if let firstPage = self.pageViewControllers.first {
            self.setViewControllers([firstPage], direction: .Forward, animated: true, completion: nil)
        }
    }

    private func setupPageControl() {
        let pageControl = UIPageControl.appearanceWhenContainedInInstancesOfClasses([MyFlightsPageViewController.classForCoder()])
        pageControl.pageIndicatorTintColor = UIColor.lightGrayColor()
        pageControl.currentPageIndicatorTintColor = UIColor.grayColor()
        pageControl.userInteractionEnabled = false
    }

    func pageViewController(pageViewController: UIPageViewController, viewControllerBeforeViewController viewController: UIViewController) -> UIViewController? {
        let currentPage = viewController as! ${name}SinglePageViewController
        if self.pageViewControllers.count == 1 {
            return nil
        }
        if var index = self.pageViewControllers.indexOf(currentPage) {
            if index == 0 {
                index = self.pageViewControllers.count
            }
            index--
            return self.pageViewControllers[index]
        }
        return nil
    }

    func pageViewController(pageViewController: UIPageViewController, viewControllerAfterViewController viewController: UIViewController) -> UIViewController? {
        let currentPage = viewController as! ${name}SinglePageViewController
        if self.pageViewControllers.count == 1 {
            return nil
        }
        if var index = self.pageViewControllers.indexOf(currentPage) {
            index++
            if index == self.pageViewControllers.count {
                index = 0
            }
            return self.pageViewControllers[index]
        }
        return nil
    }

    func presentationCountForPageViewController(pageViewController: UIPageViewController) -> Int {
        return self.pageViewControllers.count
    }

    func presentationIndexForPageViewController(pageViewController: UIPageViewController) -> Int {
        return self.currentIndex
    }

    func pageViewController(pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
        if completed {
            guard let viewControllers = pageViewController.viewControllers else {
                return
            }

            let presentedFlight = viewControllers.first as! ${name}SinglePageViewController
            if let index = self.pageViewControllers.indexOf(presentedFlight) {
                self.currentIndex = index
            }
        }
    }
}